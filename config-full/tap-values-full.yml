#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:base64", "base64")
---
#@ def config():
profile: full
shared:
  ingress_domain: #@ data.values.tap.domains.main
  image_registry:
    project_path: #@ "{}/{}".format(data.values.tap.registry.host, data.values.tap.registry.repositories.buildService)
    username: #@ data.values.tap.credentials.registry.username
    password: #@ data.values.tap.credentials.registry.password

ceip_policy_disclosed: true

excluded_packages:
  - learningcenter.tanzu.vmware.com
  - workshops.learningcenter.tanzu.vmware.com
  - policy.apps.tanzu.vmware.com
  - image-policy-webhook.signing.apps.tanzu.vmware.com

accelerator:
  ingress:
    include: true

contour:
  envoy:
    service:
      type: LoadBalancer

supply_chain: #@ data.values.tap.supply_chain

#@ if/end data.values.tap.supply_chain == 'basic':
ootb_supply_chain_basic:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""
    server_address: https://github.com/
    repository_owner: bmoussaud
    repository_name: micropets-app-gitops

#@ if/end data.values.tap.supply_chain == 'testing_scanning':
ootb_supply_chain_testing_scanning:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""
    server_address: https://github.com/
    repository_owner: bmoussaud
    repository_name: micropets-app-gitops
  supported_workloads:
    - cluster_config_template_name: config-template
      type: web
    - cluster_config_template_name: server-template
      type: server
    - cluster_config_template_name: worker-template
      type: worker
    - cluster_config_template_name: secured-config-template
      type: secured-web

#@ if/end data.values.tap.supply_chain == 'testing':
ootb_supply_chain_testing:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""
    server_address: https://github.com/
    repository_owner: bmoussaud
    repository_name: micropets-app-gitops
  supported_workloads:
    - cluster_config_template_name: config-template
      type: web
    - cluster_config_template_name: server-template
      type: server
    - cluster_config_template_name: worker-template
      type: worker
    - cluster_config_template_name: secured-config-template
      type: secured-web

tap_gui:
  service_type: ClusterIP
  app_config:
    customize:
      custom_logo: #@ data.values.tap.logo
      custom_name: #@ "The Benoit TAP Version.{}".format(data.values.tap.version)
    organization:
      name: "MicroPet Corp IT Department"
    integrations:
      #@ if "github" in data.values.tap.credentials and "token" in data.values.tap.credentials.github:
      github:
        - host: github.com
          token: #@ data.values.tap.credentials.github.token
      #@ end
    catalog:
      locations:
        #@ for catalog in data.values.tap.catalogs:
        - type: url
          target: #@ catalog
      #@ end
    proxy:
      /metadata-store:
        target: https://metadata-store-app.metadata-store.svc.cluster.local:8443/api/v1
        changeOrigin: true
        secure: true
        #@ if "empty" not in data.values.tap.metadatastore.app_ca:
        ca: #@ base64.decode(data.values.tap.metadatastore.app_ca)
        #@ end

        #@ if "empty" not in data.values.tap.metadatastore.auth_token:
        headers:
          Authorization: #@ "Bearer " + data.values.tap.metadatastore.auth_token
          X-Custom-Source: project-star
        #@ end
    backend:
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: { rejectUnauthorized: true }
      #@ end
    #@ if "github" in data.values.tap.credentials and "clientId" in data.values.tap.credentials.github and "clientSecret" in data.values.tap.credentials.github:
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: #@ data.values.tap.credentials.github.clientId
            clientSecret: #@ data.values.tap.credentials.github.clientSecret
    #@ end

metadata_store:
  ns_for_export_app_cert: "*"
  app_service_type: ClusterIP

grype:
  namespace: #@ data.values.tap.devNamespace
  targetImagePullSecret: "tap-registry"

scanning:
  metadataStore:
    url: ""

namespace_provisioner:
  controller: false
  #! namespace_selector:
  #!  matchExpressions:
  #!    - key: tap.mytanzu.xyz/my-tap-ns
  #!      operator: Exists
  additional_sources:
    - git:
        ref: origin/main
        subPath: namespace-provisioner/custom-resources/workload-sa
        url: https://github.com/bmoussaud/micropets-app-operator.git
      path: _ytt_lib/workload-sa
    - git:
        ref: origin/main
        subPath: namespace-provisioner/custom-resources/test-pipeline
        url: https://github.com/bmoussaud/micropets-app-operator.git
      path: _ytt_lib/test-pipeline
    - git:
        ref: origin/main
        subPath: namespace-provisioner/custom-resources/scanpolicies
        url: https://github.com/bmoussaud/micropets-app-operator.git
      path: _ytt_lib/scanpolicies
    - git:
        ref: origin/main
        subPath: namespace-provisioner/custom-resources/overlays
        url: https://github.com/bmoussaud/micropets-app-operator.git
      path: _ytt_lib/customize
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tap
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-group: tap
    kapp.k14s.io/change-rule: "upsert after upserting tap-install/rbac"
    kapp.k14s.io/change-rule.repo: "upsert after upserting tap-install/tap-repo"
spec:
  packageRef:
    refName: tap.tanzu.vmware.com
    versionSelection:
      constraints: #@ str(data.values.tap.version)
  serviceAccountName: tap-default-sa
  values:
    - secretRef:
        name: tap-values
